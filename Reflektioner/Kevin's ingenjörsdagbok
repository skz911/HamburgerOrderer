I will be counting this as days I have been working on the project for a longer time, but will also put date to clarify which day that was.

Day #1 (2024-09-05) Today we started the project and achieved a collected thought on which working environment we should use, we also talked about future preferences 
during the projects timeline to understand how we all work as individuals. We came up with the conclusion to use visual studio code for programming, trello for structuring
our project and assigning task to eachother. We also fixed a product description on all of our produts on the hamburger project. No difficulties today, I thought
today was successfull and it went pretty smooth and I am overall excited about starting this project and seeing it's result along the way, aswell as hopefully learn alot!
We also setup the GIT environment if that is not obvious :) 
The git commands used today was commit and merch which we had to use during the day. Commit is when you commit (submit) your own version of the file you are working on
to the main. Merch is when you have your own version (branch) which you then merch your branch/part of your code in to the file you took the branch from to connect them
into one file, sometimes you will have to resolve issues regarding the merch such as functions that are important is missing etc.

Day #2 (2024-09-12) Today we actually setup our Trello platform and started planning the whole project and assigning tasks etc and also estimating how long time each
task would take. It was kinda difficult to estimate time for each part like designing database etc but ofcourse that would be more accurate overtime when we have
more experience and done more projects. Now we might have over/under estimated the time needed for each part but we will see! I will be working on setting up
the database and designing it and then after that working on the backend alongside Casper. I also started researching about databases and how to correctly set
them up. I learned about Normalizations for database and the different forms like first form normalization, second form normalization etc etc... It was abit hard 
to grasp the concept so I will continue watching video and doing research so I totally understand the concept before starting to design the database.

Day #3 (2024-09-26) I have for the past week been doing alot of reasearch and grasped the concept of the database better with help from alot of youtube videos and google.
I have been watching videos here and there for the past week and learning programming overall, so it is kinda hard to point out every single day that I have been researching.
But now today I fixed the logo so it was transparent and got a few other angles of the BTHDonalds logo. I also finished the database diagram so now it is comitted into the
planning folder in github using commit. Now I feel more prepared of things to come, and I will hopefully start working and researching on the backend later today.
Over the week I ran into a few different problems with the database. I felt like grasping the overall database concept was clear, but then when I used relationship 
system in the database it got abit more complicated and I feel more secure about it now. I also cloned the project today from github and so I am ready to add code into
the backend server. I came to an understanding that the database structure will most likely change during the timeline, but for now I finished the base and I can continue
to work further on the project.
I used commit and also git clone, to clone the current version of the project to visual studio code.

Day #4 (2024-09-30) Today I got the project working with the containers and downloaded dockers desktop. I also made a quick skeleton on the backend server so we have that running. 
Tomorrow I plan on changing the current database container (MongoDB) to mySQL, and also setting up the database so we have the database side of the project completely finished.
I ran into some issues regarding the GIT when I was supposed to commit and I had an issue where it said something about a git commit already being in process. However, if I remember
correctly I just had to remove an index.lock file from the /.git folder and it went back to working again :) Overall a pretty successfull day if I say so myself and now I feel like
I have the project in my hands and less research & more fun programming.
Today I used GIT commit, GIT merge and GIT clone.

Day #5 (2024-10-01) As I stated yesterday I was planning on changing the current database container (MongoDB) to MySQL. Which I successfully did and now we are using MySQL and I managed
to get it working with the containers and uploaded it to github. However, Today when I opened the project I could not start the dockers anymore and it did not work. However, I searched around
abit on google and tried clearing the cache of all the dockers and redownloading them and that seemed to fix it. Today I also for the first time if I recall correctly, used git branches, when I take a version of the 
project and I continue developing on that part (branch) by myself and do all the coding and testing there and then if it is good, I will push it into the main project. I also had to merge the project. But overall
a good day and tomorrow I plan on adding the actual database and structuring it will tables etc + I will try to get the get/post requests working and try to see if the server endpoints work :)

Day #6 and #7 (2024-10-02 and 2024-10-03) Today I added the actual database and all tables. However, I came into the problem where the database was only local and I did not know how to proceed where I could upload the database scheme to
the github. But after some research I stumbled upon "Database seeding" which was the solution so I dumped the current database I had and made a seed and uploaded to the github. I ran into some problems where I couldnt
start the server.js file since in the dockerfile we was redirecting the wrong directory where the server.js file was located, which took me a while to figure out but after a while it clocked in my head while reading
the error message. I also used a new tool for me which was postman. Postman is a tool where you can send endpoint api requests to the server with your own customized payload. I used this to test so the order api
was functional and the port etc was all working and information could be sent there. I also ran into the problem where the seed file could not start but it didnt take long until I found the solution which was
that I needed to have UTF8 coding on the seed file, which I could easily change in my visual studioc code.
Today I used GIT Commit and branches and fetch and pull

Day #8 (2024-10-10) I unfortunately got very sick for a full week and could not move from my bed so I did some research amongst the days I was sick about javascript in general and mysql databases and how to query etc...
But this specific day I removed the date variable from the database seed and uploaded the new dump. I also started working quite a bit with the order api post request to handle all the data that gets sent from the 
front end and came a decent bit today but unfortunately wont have time to finish + I will have to talk with the rest of the group how the data payload will look like from their frontend so I can know how to handle the
data correctly. But I learned alot today about database and I took some help via chatgpt to educate me about some examples and how to query correctly and few tips. I ran into one problem today where most of my time
was spent trying to solve (it took around 1-2 hours to solve woho!) well, the problem was that I just could not connect to the database and I kept seeing in docker that it just refused to connect and I had no idea
why it wouldnt work since it did work last time I worked on it. However, after 1 hour or so I chose to restart only the backend container and realised it connected perfectly fine. So the problem was that the backend is
trying to establish a connection to the database when the database container is not even initalized yet so it outputs an error. So for next time I will fix so the backend waits until the database is up and initialized
before trying to establish a connection when the database is closed!! :D I will also try to book a meeting with the group so we can get over with how we want to send/receive data via the api requests so we are on the
same page :)
Today I used git commit, git pull, git fetch

Day #9 (2024-10-14) Today I worked together with Linus to get the backend fully done. We sat with the project in discord together and collaborated our minds together since he was the one that created the frontend for
burgerorderer page, so we had to collaborate to know what JSON Object he is sending to my backend so I can take this information and work with it in the correct ways. This was a very successfull day and we sat for
multiple hours to get this working and in the end it turned out great. However, we ran into some problems during the worktime. First of all we remade the old database system abit so we also have a table that can hold
the "burger ingredients" and store the burger. So we had to make a new database seed with the remade database aswell. We also had this problem last time where the backend tried connecting to the database before it
was up and running in the container, but it was solved by adding an automatic retry in the .yml file where it always retries to connect to the database, what we added was a "health-care". During the coding of the 
backend endpoints we used some help from chatgpt, mainly for some syntax and explaining of code. However, since the system is so "advanced" and the AI would require alot of information to help us it was quite 
difficult to get a very helpful response sometimes, where we had to look otherwise on google & try + test and implement ideas of our own. But in the end we manage to puzzle the endpoints together so they work.
We also did our first testing of the frontend + backend together and it worked out great and we managed to successfully do a "full" run of the project, where we send choose items in the frontend to order, post
request these items in a json object to the backend, unload these items into the database, and then send a get request to the backend to retrieve the all the orders and see the order we just placed in the database.
I learned a good amount of javascript today aswell. Now we basically only have the frontend (kitchenview) part of the project left. Upon reflecting back on the project I personally think it would be easier
to work with the database a different way and not use our system we have today, where you can choose your own ingredients on the burger and build your own burger. On one side, this was better in terms of
knowledge and personal development within software engineering, but I think we overdid ourselves with the complexitiy. I do not regret doing it this way, but maybe an EASIER way would have been just having
plain menus and a database that might not be as good normalized as it is today, but it would have been easier to grasp the idea if we started with that and THEN moved on to the more difficult way of doing things.
However, the easier path is now always the best path and therefore I do not regret making it this way, and it is more of an achievement having it like this, and the satisfaction when we got the problems working felt
extra good since we made it the more difficult way. 
Today I used git merge, git pull, fetch, git add, git commit, git branch
